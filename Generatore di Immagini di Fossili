<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generatore di Immagini di Fossili</title>
    <!-- Inclusione di Tailwind CSS per uno stile moderno e reattivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style>
        /* Stili personalizzati per l'applicazione */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .container {
            max-width: 900px;
            width: 100%;
            padding: 2rem;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #6b7280;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>

    <div class="container bg-white p-8 rounded-2xl shadow-lg border border-gray-200">
        <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-800 text-center mb-2">
            Generatore di Immagini di Fossili
        </h1>
        <p class="text-gray-500 text-center mb-8 text-sm sm:text-base">
            Descrivi un fossile e l'IA ne creerà un'immagine per te.
        </p>

        <!-- Area di input e bottone -->
        <div class="flex flex-col sm:flex-row gap-4 mb-8">
            <textarea id="fossil-description" class="flex-grow p-4 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-gray-700 resize-none h-32 sm:h-auto" placeholder="Esempio: 'un cranio di Tyrannosaurus rex parzialmente sepolto, con denti affilati e texture ossea realistica, su uno sfondo roccioso'..."></textarea>
            <button id="generate-button" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-xl shadow-lg hover:bg-blue-700 transition duration-300 self-stretch sm:self-auto">
                Genera Immagine
            </button>
        </div>

        <!-- Area di visualizzazione -->
        <div id="result-area" class="flex flex-col items-center justify-center p-4 min-h-[300px] border border-gray-300 rounded-xl bg-gray-50 text-gray-500">
            <span id="initial-message" class="text-center">L'immagine generata apparirà qui.</span>
            <div id="loading-spinner" class="loader hidden"></div>
            <p id="error-message" class="text-red-500 text-center hidden"></p>
            <img id="generated-image" class="hidden max-w-full max-h-[500px] rounded-xl shadow-md mt-4" alt="Immagine del fossile generata dall'IA">
            <a id="download-link" class="hidden mt-4 bg-gray-700 text-white font-bold py-2 px-4 rounded-xl shadow-md hover:bg-gray-800 transition duration-300" download="fossile.png">Scarica Immagine</a>
        </div>
    </div>

    <script>
        // Funzione per mostrare un messaggio di errore
        function showErrorMessage(message) {
            document.getElementById('loading-spinner').classList.add('hidden');
            document.getElementById('error-message').innerText = message;
            document.getElementById('error-message').classList.remove('hidden');
            document.getElementById('initial-message').classList.add('hidden');
        }

        // Funzione per effettuare una chiamata API con backoff esponenziale
        async function fetchWithExponentialBackoff(url, options, retries = 5, delay = 1000) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (response.ok) {
                        return await response.json();
                    }
                    if (response.status === 429) { // Too Many Requests
                        console.warn(`API call failed with status 429. Retrying in ${delay / 1000} seconds...`);
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2; // Raddoppia il ritardo
                    } else {
                        const errorData = await response.json();
                        throw new Error(`API error: ${response.status} - ${errorData.error.message}`);
                    }
                } catch (error) {
                    if (i === retries - 1) {
                        throw error;
                    }
                    console.error(`Fetch attempt failed: ${error.message}. Retrying...`);
                    await new Promise(res => setTimeout(res, delay));
                    delay *= 2; // Raddoppia il ritardo
                }
            }
            throw new Error("API call failed after multiple retries.");
        }

        window.onload = function() {
            const generateButton = document.getElementById('generate-button');
            const fossilDescription = document.getElementById('fossil-description');
            const initialMessage = document.getElementById('initial-message');
            const loadingSpinner = document.getElementById('loading-spinner');
            const errorMessage = document.getElementById('error-message');
            const generatedImage = document.getElementById('generated-image');
            const downloadLink = document.getElementById('download-link');

            generateButton.addEventListener('click', async () => {
                const prompt = fossilDescription.value.trim();

                // Validazione dell'input
                if (!prompt) {
                    showErrorMessage('Per favore, inserisci una descrizione del fossile.');
                    return;
                }

                // Nasconde gli elementi precedenti e mostra lo spinner di caricamento
                initialMessage.classList.add('hidden');
                errorMessage.classList.add('hidden');
                generatedImage.classList.add('hidden');
                downloadLink.classList.add('hidden');
                loadingSpinner.classList.remove('hidden');

                // Prepara il prompt per l'AI
                const userPrompt = `A photo-realistic image of a fossil: ${prompt}. The image should have a naturalistic feel with intricate details.`;

                try {
                    const payload = {
                        instances: { prompt: userPrompt },
                        parameters: { "sampleCount": 1 }
                    };
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                    // Chiamata all'API di Gemini per generare l'immagine
                    const result = await fetchWithExponentialBackoff(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    // Gestione della risposta
                    if (result.predictions && result.predictions.length > 0 && result.predictions[0].bytesBase64Encoded) {
                        const base64Data = result.predictions[0].bytesBase64Encoded;
                        const imageUrl = `data:image/png;base64,${base64Data}`;

                        // Aggiorna l'immagine e il link di download
                        generatedImage.src = imageUrl;
                        downloadLink.href = imageUrl;

                        // Nasconde lo spinner e mostra l'immagine e il link
                        loadingSpinner.classList.add('hidden');
                        generatedImage.classList.remove('hidden');
                        downloadLink.classList.remove('hidden');
                    } else {
                        showErrorMessage("Impossibile generare l'immagine. Riprova con una descrizione diversa.");
                    }
                } catch (error) {
                    console.error('Errore durante la generazione dell\'immagine:', error);
                    showErrorMessage(`Si è verificato un errore: ${error.message}.`);
                }
            });
        };
    </script>
</body>
</html>
